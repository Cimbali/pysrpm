[pysrpm]
# Release id, and default directories to build and put the finished RPMs
release       = 1
rpm_base      = build/rpm
dest_dir      = dist

# self-explanatory build options
spec_only   = no
source_only = yes
binary_only = no
keep_temp   = no
dry_run     = no

# Which python to use, to prefix package name and as __python RPM macro
# Typically python, or python3 if the target OS does not have python3 as default
python = python3
# Override python version, needs to be a python version expression e.g. == 3.9 or >= 3.7
python_version =
# Override architecture
arch = noarch

# Whether to prefix the RPM name with python- or python3â€“
# You can use configparser.BasicInterpolation notation
package_prefix = ${python}-

# Alternately, "Requires(hint)" can be used, leave empty to disable
optional_dependency_tag = Suggests

# List of extras to include as Requires or Suggests, with glob-like matching (e.g. * for all extras)
extract_dependencies = no
requires =
suggests =
requires_extras =
suggests_extras =

# See https://www.python.org/dev/peps/pep-0508/#environment-markers
# These allow to reduce the list of conditions on python dependencies, if they evaluate to True or False
environment_markers =
	os_name: posix
	sys_platform: linux
	platform_system: Linux
    implementation_name: cpython
	platform_python_implementation: CPython

# Allow missing keys
optional_keys = long-description license-file doc-file

[base_templates]
# Write RPM macros as %{{macro_name}} and PKG-INFO entries as {key} (expanded to the value right of "Key: " in PKG-INFO)
# with the additional: rpmname, rpmversion, long-description, sourcefile.
# To get a literal %, $, {, or }, double the characters.

# Alternately: python3%{{suffix:%python3_version}}-{name}, or python-{name}, etc.
python_package = python%{{python3_version}}dist({name})
python_arch = python%{{suffix:%python3_version}}({arch})
python_abi = python(abi)
python_devel = python3-devel

# From here on, any key defines a section
preamble =
	Summary: {summary}
	Name: {rpmname}
	Version: {rpmversion}
	Release: {release}
	Source0: {sourcefile}
	License: {license}
	Prefix: %{{_prefix}}
	BuildArch: {arch}
	Vendor: {author} <{author-email}>
	Url: {home-page}
	Requires: ${python_abi} = %{{python3_version}}
	Provides: ${python_package}
	BuildRequires:  findutils ${python_devel}

description =
	{long-description}

prep =
	%setup -n {name}-{version}

generate_buildrequires =

# Default to system-defined python build
build =
	%py3_build

# Default to system-defined python install, make files in bin dir executable,
# and improve tracking of RPM-included files and directories.
install =
	%py3_install

	find %{{buildroot}}/%{{_bindir}}/{name} -type f -maxdepth 1 -exec chmod 0755 {{}} \\;

	find $$RPM_BUILD_ROOT -name '{name}*' -printf '/%%P\\n' -prune > INSTALLED_FILES

	%find_lang {name}
	cat {name}.lang >> INSTALLED_FILES

check =

pre =
post =
preun =
postun =
pretrans =
posttrans =
verify =
triggerprein =
triggerin =
triggerun =
triggerpostun =
filetriggerin =
filetriggerun =
filetriggerpostun =
transfiletriggerin =
transfiletriggerun =
transfiletriggerpostun =

files = -f INSTALLED_FILES

	%license {license-file}
	%doc {doc-file}

	%defattr(-,root,root)

changelog =
